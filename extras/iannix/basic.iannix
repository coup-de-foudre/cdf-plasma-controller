 /*

Copyright 2018, Michael McCoy <michael.b.mccoy@gmail.com>, and
copyright 2010-2015, IanniX Association.

This file is part of the CdF Plasma Controller.

The CdF Plasma Controller is free software: you can redistribute it and/or
modify it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the License,
or (at your option) any later version.

CdF Plasma Controller is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero
General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with the Cdf Plasma Controller.  If not, see
<http://www.gnu.org/licenses/>.
*/


/*
 *	IanniX Score File
 */


/*
 *	This method is called first.
 *	It is the good section for asking user for script global variables (parameters).
 *
 * 	This section is never overwritten by IanniX when saving.
 */
function askUserForParameters() {
    //title("The title of the parameter box");
    // ask("Group name of the parameter (only for display purposes)", "Parameter label", "myGlobalVar", "theDefaultValue");
}


/*
 *	This method stores all the operations made through IanniX scripts.
 *	You can add some commands here to make your own scripts!
 *	Scripts are written in Javascript but even with a limited knowledge of Javascript, many types of useful scripts can be created.
 *
 *	Beyond the standard javascript commands, the run() function is used to send commands to IanniX.
 *	Commands must be provided to run() as a single string.
 *	For example, run("zoom 100"); sets the display zoom to 100%.
 *
 *	To combine numeric parameters with text commands to produce a string, use the concatenation operator.
 *	In the following example center_x and center_y are in numeric variables and must be concatenated to the command string.
 *	Example: run("setPos current " + center_x + " " + center_y + " 0");
 *
 *	To learn IanniX commands, perform an manipulation in IanniX graphical user interface, and see the Helper window.
 *	You'll see the syntax of the command-equivalent action.
 *
 *	And finally, remember that most of commands must target an object.
 *	Global syntax is always run("<command name> <target> <arguments>");
 *	Targets can be an ID (number) or a Group ID (string name of group) (please see "Info" tab in Inspector panel).
 *	Special targets are "current" (last used ID), "all" (all the objects) and "lastCurve" (last used curve).
 *
 * 	This section is never overwritten by IanniX when saving.
 */
function makeWithScript() {
    //Clears the score
    run("clear");
    //Resets rotation
    run("rotate 0 0 0");
    //Resets score viewport center
    run("center 0 0");
    //Resets score zoom
    run("speed 1");

    var ip_address = "192.168.255.255";

    addTimeline(100, 60, 11, "pwm1", ip_address);
    addTimeline(200, 45, 0, "pwm2", ip_address);
    addTimeline(300, 30, -11, "pwm3", ip_address);
    addTimeline(400, 15, -22, "pwm4", ip_address);
}


function addTimeline(id, length, yOffset, channel, ip_address) {
    var port = 5005;
    var center = length / 2.0;

    run("add curve " + id);
    run("setpos current " + center + " " + yOffset + " 0");
    var points1 = [
        {x: -center, y: yOffset, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
        {x: center, y: yOffset, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0}
    ];
    for(var i = 0 ; i < points1.length ; i++) {
        run("setpointat current " + i + " " + points1[i].x + " " + points1[i].y + " " + points1[i].z + " " + points1[i].c1x + " " + points1[i].c1y + " " + points1[i].c1z + " " + points1[i].c2x + " " + points1[i].c2y + " " + points1[i].c2z);
    }

    // Add a cursor
    run("add cursor auto");
    run("setCurve current lastCurve");
    run("setPos current 0 " + yOffset + " 0");

    // Make x-scale 10:1
    run("setWidth current 20");
    run("setBoundsSourceMode current 3");
    run("setBoundsSource current 0 1 " + yOffset + " " + " " + yOffset + 10 + " 0 1");

    // loop
    run("setPattern current 0 0 1");

    // Set OSC message
    var osc_address = "osc://" + ip_address + ":" + port;
    var endpoint = "/" + channel + "/fine/value collision_value_y";
    run("setmessage current 100, " + osc_address + endpoint);
}


/*
 *	When an incoming message is received, this method is called.
 *		- <protocol> tells information about the nature of message ("osc", "midi", "direct…)
 *		- <host> and <port> gives the origin of message, specially for IP protocols (for OpenSoundControl, UDP or TCP, it is the IP and port of the application that sends the message)
 *		- <destination> is the supposed destination of message (for OpenSoundControl it is the path, for MIDI it is Control Change or Note on/off…)
 *		- <values> are an array of arguments contained in the message
 *	
 * 	This section is never overwritten by IanniX when saving.
 */
function onIncomingMessage(protocol, host, port, destination, values) {
    //Logs a message in the console (open "Config" tab from Inspector panel and see "Message log")
    console("Received on '" + protocol + "' (" + host + ":" + port + ") to '" + destination + "', " + values.length + " values : ");

    //Browses all the arguments and displays them in log window
    for(var valueIndex = 0 ; valueIndex < values.length ; valueIndex++)
        console("- arg " + valueIndex + " = " + values[valueIndex]);
}


/*
 *	This method stores all the operations made through the graphical user interface.
 *	You are not supposed to modify this section, but it can be useful to remove some stuff that you added accidentaly.
 *
 * 	Be very careful! This section is automaticaly overwritten when saving a score.
 */
function madeThroughGUI() {
//GUI: NEVER EVER REMOVE THIS LINE
	run("zoom 360.6583421634555");
	run("rotate 0 0 0");
	run("speed 1");
	run("center 21.3116 -2.74288");


	run("add curve 3");
	run("setpos current 0.249052 -0.00172746 0");
	var points3 = [
		{x: -0.205807, y: 9.87703, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 2.99578, y: -6.83866, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 6.36931, y: -9.80986, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 11.8507, y: -10.2351, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 12.8741, y: -0.0793561, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 14.9997, y: 9.91893, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 15.4721, y: 5.90387, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 15.9444, y: 9.8402, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 16.653, y: 5.66769, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 17.2041, y: 9.68275, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 18.0701, y: 5.82514, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 18.6212, y: 9.52529, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 19.0935, y: 6.14005, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 19.8808, y: 9.68275, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 21.6915, y: 9.8402, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 22.0851, y: -0.0793561, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 23.4235, y: 9.8402, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 24.2107, y: 0.23555, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 25.1555, y: 9.60402, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 25.9427, y: 0.156824, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 26.4151, y: 9.21039, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 28.4736, y: -9.20853, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 30.5089, y: -3.97696, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 32.6637, y: -5.92793, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 33.9728, y: 9.05293, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 35.1537, y: 9.13166, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 35.6261, y: 4.25061, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 37.3581, y: 9.05293, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 38.6177, y: 2.51862, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 42.0817, y: 3.30589, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 44.5526, y: 10.3243, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
	];
	for(var i = 0 ; i < points3.length ; i++)
		run("setpointat current " + i + " " + points3[i].x + " " + points3[i].y + " " + points3[i].z + " " + points3[i].c1x + " " + points3[i].c1y + " " + points3[i].c1z + " " + points3[i].c2x + " " + points3[i].c2y + " " + points3[i].c2z);

	run("add curve 300");
	run("setpos current 15 -11 0");
	var points300 = [
		{x: -15, y: -11, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 15, y: -11, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
	];
	for(var i = 0 ; i < points300.length ; i++)
		run("setpointat current " + i + " " + points300[i].x + " " + points300[i].y + " " + points300[i].z + " " + points300[i].c1x + " " + points300[i].c1y + " " + points300[i].c1z + " " + points300[i].c2x + " " + points300[i].c2y + " " + points300[i].c2z);
	run("add cursor 301");
	run("setcurve current lastCurve");
	run("setpos current 0 -22 0");
	run("setwidth current 20");
	run("setboundssourcemode current 3");
	run("setboundssource current 0.000 1.000 -11.000 -1110.000 0.000 1.000");
	run("setpattern current 0 0 1");
	run("setmessage current 100, osc://192.168.1.255:5005/pwm3/fine/value collision_value_y ,");
	run("settime current 38344.420587291665");


	run("add curve 100");
	run("setpos current 30 11 0");
	var points100 = [
		{x: -30, y: 11, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 30, y: 11, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
	];
	for(var i = 0 ; i < points100.length ; i++)
		run("setpointat current " + i + " " + points100[i].x + " " + points100[i].y + " " + points100[i].z + " " + points100[i].c1x + " " + points100[i].c1y + " " + points100[i].c1z + " " + points100[i].c2x + " " + points100[i].c2y + " " + points100[i].c2z);
	run("add cursor 101");
	run("setcurve current lastCurve");
	run("setpos current 0 22 0");
	run("setwidth current 20");
	run("setboundssourcemode current 3");
	run("setboundssource current 0.000 1.000 11.000 1110.000 0.000 1.000");
	run("setpattern current 0 0 1");
	run("setmessage current 100, osc://192.168.1.255:5005/pwm1/fine/value collision_value_y ,");
	run("settime current 38344.420587291665");


	run("add curve 400");
	run("setpos current 7.5 -22 0");
	var points400 = [
		{x: -7.5, y: -22, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 7.5, y: -22, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
	];
	for(var i = 0 ; i < points400.length ; i++)
		run("setpointat current " + i + " " + points400[i].x + " " + points400[i].y + " " + points400[i].z + " " + points400[i].c1x + " " + points400[i].c1y + " " + points400[i].c1z + " " + points400[i].c2x + " " + points400[i].c2y + " " + points400[i].c2z);
	run("add cursor 401");
	run("setcurve current lastCurve");
	run("setpos current 0 -44 0");
	run("setwidth current 20");
	run("setboundssourcemode current 3");
	run("setboundssource current 0.000 1.000 -22.000 -2210.000 0.000 1.000");
	run("setpattern current 0 0 1");
	run("setmessage current 100, osc://192.168.1.255:5005/pwm4/fine/value collision_value_y ,");
	run("settime current 38344.420587291665");


	run("add curve 200");
	run("setpos current 22.5 0 0");
	var points200 = [
		{x: -22.5, y: 0, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
		{x: 22.5, y: 0, z: 0, c1x: 0, c1y: 0, c1z: 0, c2x: 0, c2y: 0, c2z: 0},
	];
	for(var i = 0 ; i < points200.length ; i++)
		run("setpointat current " + i + " " + points200[i].x + " " + points200[i].y + " " + points200[i].z + " " + points200[i].c1x + " " + points200[i].c1y + " " + points200[i].c1z + " " + points200[i].c2x + " " + points200[i].c2y + " " + points200[i].c2z);
	run("add cursor 201");
	run("setcurve current lastCurve");
	run("setpos current 0 0 0");
	run("setwidth current 20");
	run("setboundssourcemode current 3");
	run("setboundssource current 0.000 1.000 0.000 10.000 0.000 1.000");
	run("setpattern current 0 0 1");
	run("setmessage current 100, osc://192.168.1.255:5005/pwm2/fine/value collision_value_y ,");
	run("settime current 38344.420587291665");




//GUI: NEVER EVER REMOVE THIS LINE
}


/*
 *	This method stores all the operations made by other softwares through one of the IanniX interfaces.
 *	You are not supposed to modify this section, but it can be useful to remove some stuff that you or a third party software added accidentaly.
 *
 * 	Be very careful! This section is automaticaly overwritten when saving a score.
 */
function madeThroughInterfaces() {
//INTERFACES: NEVER EVER REMOVE THIS LINE
//INTERFACES: NEVER EVER REMOVE THIS LINE
}


/*
 *	This method is called last.
 *	It allows you to modify your hand-drawn score (made through graphical user interface).
 *
 * 	This section is never overwritten by IanniX when saving.
 */
function alterateWithScript() {
}


/*
 *	//APP VERSION: NEVER EVER REMOVE THIS LINE
 *	Made with IanniX 0.9.20
 *	//APP VERSION: NEVER EVER REMOVE THIS LINE
 */



